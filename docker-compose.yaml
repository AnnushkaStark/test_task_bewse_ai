version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "echo", "ruok"]
      interval: 5s
      timeout: 2s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "29092:29092"
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_KAFKA://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_KAFKA://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_KAFKA:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network
  db:
    image: postgres:13
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  web:
    build: .
    ports:
      - "5000:5000"
    env_file:
      - .env
    environment:
      POSTGRES_HOST: db
      POSTGRES_HOST_AUTH_METHOD: trust
      KAFKA_BROKER_URL: kafka:29092
    depends_on:
      - db
      - kafka
    networks:
      - app-network

volumes:
  pgdata:
  kafka_data:

networks:
  app-network:
    driver: bridge
